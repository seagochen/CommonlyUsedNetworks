import torch
import torch.nn as nn

class TNet(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(TNet, self).__init__()
        self.conv1 = nn.Conv1d(in_channels, 64, 1)
        self.conv2 = nn.Conv1d(64, 128, 1)
        self.conv3 = nn.Conv1d(128, 1024, 1)
        self.fc1 = nn.Linear(1024, 512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, out_channels * out_channels)
        self.bn1 = nn.BatchNorm1d(64)
        self.bn2 = nn.BatchNorm1d(128)
        self.bn3 = nn.BatchNorm1d(1024)
        self.bn4 = nn.BatchNorm1d(512)
        self.bn5 = nn.BatchNorm1d(256)
        self.relu = nn.ReLU()
        
    def forward(self, x):
        identity = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        out = self.conv3(out)
        out = self.bn3(out)
        out = self.relu(out)
        out = nn.MaxPool1d(out.size(-1))(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.bn4(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.bn5(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = out.view(out.size(0), -1, out.size(-1))
        out = out + torch.eye(out.size(-1)).unsqueeze(0).to(out.device)
        q, _ = torch.max(out, dim=2)
        out = torch.matmul(out.transpose(2, 1), q.unsqueeze(2)).transpose(2, 1)
        out = torch.squeeze(out, dim=1)
        out = torch.matmul(identity.transpose(2, 1), out)
        return out

class PointNet(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(PointNet, self).__init__()
        self.tnet1 = TNet(in_channels, 3)
        self.tnet2 = TNet(64, 64)
        self.conv1 = nn.Conv1d(in_channels, 64, 1)
        self.conv2 = nn.Conv1d(64, 64, 1)
        self.conv3 = nn.Conv1d(64, 64, 1)
        self.conv4 = nn.Conv1d(64, 128, 1)
        self.conv5 = nn.Conv1d(128, 1024, 1)
        self.bn1 = nn.BatchNorm1d(64)
        self.bn2 = nn.BatchNorm1d(64)
        self.bn3 = nn.BatchNorm1d(64)
        self.bn4 = nn.BatchNorm1d(128)
        self.bn5 = nn.BatchNorm1d(1024)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.5)
        self.fc1 = nn.Linear(1024, 512)
        self.bn6 = nn.BatchNorm1d(512)
        self.fc2 = nn.Linear(512, out_channels)
        
    def forward(self, x):
        transform = self.tnet1(x)
        x = torch.matmul(x.transpose(2, 1), transform)
        x = x.transpose(2, 1)
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.relu(x)
        transform = self.tnet2(x)
        x = torch.matmul(x.transpose(2, 1), transform)
        x = x.transpose(2, 1)
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.relu(x)
        x = self.conv4(x)
        x = self.bn4(x)
        x = self.relu(x)
        x = self.conv5(x)
        x = self.bn5(x)
        x = self.relu(x)
        x = nn.MaxPool1d(x.size(-1))(x)
        x = x.view(x.size(0), -1)
        x = self.fc1(x)
        x = self.bn6(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc2(x)
        return x
